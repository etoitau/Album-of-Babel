!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),i=function(){function e(){}return e.hexToName=function(e){return this.bigIntToBase(this.baseToBigInt(e,this.hexiDecimal),this.bigBase)},e.nameToHex=function(e,t){return this.fixLength(this.bigIntToBase(this.baseToBigInt(e,this.bigBase),this.hexiDecimal),t)},e.fixLength=function(e,t){return e.length<t?"0".repeat(t-e.length)+e:String(e)},e.bigIntShortForm=function(e){var t=e.toString();return t.length<10?t:t.charAt(0)+"."+t.substr(1,3)+"..."+t.substr(t.length-3)+" x 10^"+(t.length-1)},e.getMax=function(){if(null!=this.maxBig)return this.maxBig;for(var e="",t=0;t<Math.pow(r.PicViewer.DEFAULT_PIC_SIZE,2);t++)e+="ffffff";return this.maxBig=this.baseToBigInt(e,this.hexiDecimal),this.maxBig},e.getPercent=function(e){return(e*BigInt(100)/this.getMax()).toString()},e.baseToBigInt=function(e,t){for(var n=BigInt(t.length),r=BigInt("0"),i=0,o=e;i<o.length;i++){var a=o[i];r=n*r+BigInt(t.indexOf(a))}return r},e.bigIntToBase=function(e,t){for(var n=BigInt(t.length),r=Array(),i=BigInt("0");e>i;){var o=Number(e%n);r.push(t[o]),e/=n}return r.reverse().join("")},e.numberToBase=function(e,t){for(var n=t.length,r=Array();e>0;)r.push(t[e%n]),e=Math.floor(e/n);return r.reverse().join("")},e.hexiDecimal=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],e.bigBase=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",".","-","_","~"],e.tenArray=[0,1,2,3,4,5,6,7,8,9],e}();t.Convert=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=function(){function e(t){this.color=e.DEFAULT_COLOR,this.cellSize=t,this.div=document.createElement("div"),this.setSize(this.cellSize),this.setColor(this.color)}return e.prototype.reset=function(){this.setColor(e.DEFAULT_COLOR)},e.prototype.setRandom=function(){for(var e="",t=0;t<this.color.length;t++)e+=r.Convert.hexiDecimal[Math.floor(Math.random()*r.Convert.hexiDecimal.length)];this.setColor(e)},e.prototype.setSize=function(e){this.cellSize=e,this.div.style.width=e.toString()+"px",this.div.style.height=e.toString()+"px"},e.prototype.setColor=function(e){this.color=e,this.div.style.backgroundColor="#"+this.color},e.prototype.getColor=function(){return this.color},e.DEFAULT_SIZE=10,e.DEFAULT_COLOR="202020",e}();t.ColorCell=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(3),o=function(){function e(e,t){this.cellSize=r.ColorCell.DEFAULT_SIZE,this.gridWidth=e,this.gridHeight=t,this.table=document.createElement("table"),this.div=document.createElement("div"),this.cells=this.createCells(),this.populateTable()}return e.prototype.reset=function(){for(var e=0,t=this.cells;e<t.length;e++)for(var n=0,r=t[e];n<r.length;n++){r[n].reset()}},e.prototype.setRandom=function(){for(var e=0,t=this.cells;e<t.length;e++)for(var n=0,r=t[e];n<r.length;n++){r[n].setRandom()}},e.prototype.getHexData=function(){for(var e="",t=0,n=this.cells;t<n.length;t++)for(var r=0,i=n[t];r<i.length;r++){e+=i[r].getColor()}return e},e.prototype.setFromHexData=function(e){var t=this.gridHeight*this.gridWidth*6;if(e.length>t)console.log("data wrong size "+e.length+" vs "+this.gridHeight*this.gridWidth*6);else{e=i.Convert.fixLength(e,t);for(var n=0,r=0,o=this.cells;r<o.length;r++)for(var a=0,c=o[r];a<c.length;a++){c[a].setColor(e.substring(n,n+=6))}}},e.prototype.setCellSize=function(e){this.cellSize=e;for(var t=0,n=this.cells;t<n.length;t++)for(var r=0,i=n[t];r<i.length;r++){i[r].setSize(e)}},e.prototype.setCellColor=function(e,t,n){this.cells[e][t].setColor(n)},e.prototype.createCells=function(){for(var e=new Array,t=0;t<this.gridHeight;t++){for(var n=new Array,i=0;i<this.gridWidth;i++)n.push(new r.ColorCell(this.cellSize));e.push(n)}return e},e.prototype.populateTable=function(){this.table.className="pictable";for(var e=0,t=this.cells;e<t.length;e++){for(var n=t[e],r=document.createElement("tr"),i=0,o=n;i<o.length;i++){var a=o[i],c=document.createElement("td");c.appendChild(a.div),r.appendChild(c)}this.table.appendChild(r)}this.div.appendChild(this.table)},e.DEFAULT_PIC_SIZE=16,e}();t.PicViewer=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});new(n(7).Page)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8),i=n(5),o=n(13),a=n(14),c=n(4),u=n(3),l=n(15),s=function(){function e(){var e,t=this,n=i.PicViewer.DEFAULT_PIC_SIZE;document.title="Album of Babel",(e=h()).id="title",document.body.appendChild(e),r.TitleBuilder.build(e),(e=h()).style.height="30px",document.body.appendChild(e);var u=document.createElement("table");u.align="center",document.body.appendChild(u),u.className="layouttable";var l=document.createElement("tr");u.appendChild(l);var s=document.createElement("td");l.appendChild(s);var f=document.createElement("td");l.appendChild(f),(e=h()).id="editor",document.body.appendChild(e),this.editorView=new i.PicViewer(n,n),e.appendChild(this.editorView.div),s.appendChild(e);var p=new a.Pen(this.editorView);e=h();new o.ColorPick(e,p);f.appendChild(e);var v=document.createElement("p");v.align="center",document.body.appendChild(v);var g=document.createElement("a");g.setAttribute("align","center"),g.innerHTML="Clear",g.href="#",g.onclick=function(){return t.clearEditor()},v.appendChild(g),v.appendChild(d()),(g=document.createElement("a")).setAttribute("align","center"),g.innerHTML="Find this in album",g.href="#",g.onclick=function(){return t.findDrawnAndShow()},v.appendChild(g),v.appendChild(d()),(g=document.createElement("a")).setAttribute("align","center"),g.innerHTML="Flip to random page",g.href="#",g.onclick=function(){return t.findRandomAndShow()},v.appendChild(g),(u=document.createElement("table")).align="center",document.body.appendChild(u),l=document.createElement("tr"),u.appendChild(l),s=document.createElement("td"),l.appendChild(s),f=document.createElement("td"),l.appendChild(f);var m=document.createElement("td");l.appendChild(m),(e=h()).id="leftview",s.appendChild(e),this.leftView=new i.PicViewer(n,n),this.leftView.setCellSize(.6*c.ColorCell.DEFAULT_SIZE),e.appendChild(this.leftView.div),e.onclick=function(){return t.panLeft()},(e=h()).id="centerview",f.appendChild(e),this.centerView=new i.PicViewer(n,n),e.appendChild(this.centerView.div),(e=h()).id="rightview",m.appendChild(e),this.rightView=new i.PicViewer(n,n),this.rightView.setCellSize(.6*c.ColorCell.DEFAULT_SIZE),e.appendChild(this.rightView.div),e.onclick=function(){return t.panRight()},this.pageInfo=h(),this.pageInfo.align="center",this.pageInfo.id="pageinfo",document.body.appendChild(this.pageInfo),this.initViews(),(v=document.createElement("p")).align="center",document.body.appendChild(v);var b=document.createTextNode("by ");v.appendChild(b),(g=document.createElement("a")).setAttribute("align","center"),g.innerHTML="Kyle Chatman",g.href="http://cs.kchatman.com",v.appendChild(g),v.appendChild(d()),b=document.createTextNode("inspired by: "),v.appendChild(b),(g=document.createElement("a")).setAttribute("align","center"),g.innerHTML="Library of Babel",g.href="https://libraryofbabel.info/",v.appendChild(g)}return e.prototype.clearEditor=function(){this.editorView.reset()},e.prototype.initViews=function(){var e=new URLSearchParams(window.location.search).get("name");if(null==e)console.log("no name"),this.findRandomAndShow();else{console.log("name provided");var t=this.editorView.gridHeight*this.editorView.gridWidth*6;this.editorView.setFromHexData(u.Convert.nameToHex(e,t)),this.findDrawnAndShow()}},e.prototype.panLeft=function(){var e=this.centerView.getHexData();this.rightView.setFromHexData(e);var t=this.leftView.getHexData();this.centerView.setFromHexData(t),this.updateNeighbors(!0,!1),this.updatePageInfo(t)},e.prototype.panRight=function(){var e=this.centerView.getHexData();this.leftView.setFromHexData(e);var t=this.rightView.getHexData();this.centerView.setFromHexData(t),this.updateNeighbors(!1,!0),this.updatePageInfo(t)},e.prototype.findDrawnAndShow=function(){var e=this.editorView.getHexData();this.centerView.setFromHexData(e),this.updateNeighbors(!0,!0),this.updatePageInfo(e)},e.prototype.updateNeighbors=function(e,t){var n,r=this.centerView.getHexData(),i=l.Cipher.cipherToBigInt(r),o=BigInt("1");e&&(n=i-o,this.leftView.setFromHexData(l.Cipher.cipherFromBigInt(n,r.length))),t&&(n=i+o,this.rightView.setFromHexData(l.Cipher.cipherFromBigInt(n,r.length)))},e.prototype.updatePageInfo=function(e){this.pageInfo.innerHTML="";var t=l.Cipher.cipherToBigInt(e),n=this.pageInfo,r=document.createElement("span");r.innerText="Page: "+u.Convert.bigIntShortForm(t),n.appendChild(r),n.appendChild(d()),(r=document.createElement("span")).innerText="Of: "+u.Convert.bigIntShortForm(u.Convert.getMax()),n.appendChild(r),n.appendChild(d()),(r=document.createElement("span")).innerText="Found "+u.Convert.getPercent(t)+"% through book",n.appendChild(r),n.appendChild(d());var i=u.Convert.hexToName(e);window.history.replaceState(null,document.title,"?name="+i)},e.prototype.findRandomAndShow=function(){this.centerView.setRandom(),this.updateNeighbors(!0,!0),this.updatePageInfo(this.centerView.getHexData())},e}();function d(){return document.createElement("br")}function h(){return document.createElement("div")}t.Page=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.build=function(e){n(9);e.classList.add("navi");var t=document.createElement("table"),r=document.createElement("tr"),i=document.createElement("td"),o=document.createElement("h1");e.appendChild(t),t.appendChild(r),r.appendChild(i),i.appendChild(o),o.innerHTML="Album of Babel"},e}();t.TitleBuilder=r},function(e,t,n){var r=n(10),i=n(11);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=(r(i,o),i.locals?i.locals:{});e.exports=a},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],u=t.base?o[0]+t.base:o[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var d=c(s),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(a[d].references++,a[d].updater(h)):a.push({identifier:s,updater:g(h,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,d=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function h(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,v=0;function g(e,t){var n,r,i;if(t.singleton){var o=v++;n=p||(p=l(t)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=l(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=c(n[r]);a[i].references--}for(var o=u(e,t),l=0;l<n.length;l++){var s=c(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=o}}}},function(e,t,n){(t=n(12)(!1)).push([e.i,'/* padding is top right bot left */\n\nbody {\n    margin: 0;\n    font-family: "Courier New", "Courier", monospace;\n    color: #202020;\n    height: 100%;\n}\n\n.navi {\n    border-style: none none solid none;\n    border-width: 2px;\n    border-color: black;\n    margin: 0px;\n    padding-left: 50px;\n    padding-right: 20px;\n    padding-top: auto;\n    padding-bottom: auto;\n    background-color: #202020;\n    color: white;\n}\n\n.navi table {\n    margin: 0;\n    padding: 0;\n    border-collapse: collapse;\n    width: 100%;\n    height: 100%;\n}\n\ntable .title {\n    padding: 0 30px 0 0;\n    font-weight: 600;\n}\n\ntable .right {\n    padding: 0 0 0 30px;\n}\n\ntable .min {\n    width: 1%;\n    white-space: nowrap;\n}\n\ntable.pictable {\n    border-collapse: collapse;\n    margin: 0;\n    padding: 0;\n    border-style: none;\n}\n\n.pictable tr {\n    margin: 0;\n    padding: 0;\n    border-style: none;\n}\n\n.pictable td {\n    margin: 0;\n    padding: 0;\n}\n\ntable.layouttable {\n    border-collapse: collapse;\n    margin: 10;\n    padding: 5;\n    border-style: none;\n}\n\n.layouttable tr {\n    margin: 5;\n    padding: 5;\n    border-style: none;\n}\n\n.layouttable td {\n    margin: 5;\n    padding: 5;\n}\n\na, a:link, a:visited, a:active {\n    color: inherit;\n    text-decoration: none;\n}\n\np {\n    padding: 0, 30, 0, 30;\n}\n',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,c,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(3),o=function(){function e(e,t){this.parent=e,this.pen=t;var n=document.createElement("table");this.parent.appendChild(n),n.className="layouttable";var i=document.createElement("tr");n.appendChild(i);var o=document.createElement("td");i.appendChild(o);var a,c=document.createElement("td");i.appendChild(c),this.square=new r.ColorCell(20),o.appendChild(this.square.div),(a=document.createElement("span")).innerText="R: ",c.appendChild(a),this.r=this.getRGBInput(),this.r.id="r",c.appendChild(this.r),c.appendChild(document.createElement("br")),(a=document.createElement("span")).innerText="G: ",c.appendChild(a),this.g=this.getRGBInput(),this.g.id="g",c.appendChild(this.g),c.appendChild(document.createElement("br")),(a=document.createElement("span")).innerText="B: ",c.appendChild(a),this.b=this.getRGBInput(),this.b.id="b",c.appendChild(this.b),this.setListeners(),this.updateColor()}return e.prototype.setListeners=function(){var e=this;this.r.addEventListener("input",(function(t){return e.updateColor()})),this.g.addEventListener("input",(function(t){return e.updateColor()})),this.b.addEventListener("input",(function(t){return e.updateColor()}))},e.prototype.updateColor=function(){if(null!=this.r.value&&""!=this.r.value&&null!=this.g.value&&""!=this.g.value&&null!=this.b.value&&""!=this.b.value){var e=i.Convert.fixLength(i.Convert.numberToBase(Number(this.r.value),i.Convert.hexiDecimal),2)+i.Convert.fixLength(i.Convert.numberToBase(Number(this.g.value),i.Convert.hexiDecimal),2)+i.Convert.fixLength(i.Convert.numberToBase(Number(this.b.value),i.Convert.hexiDecimal),2);this.square.setColor(e),this.pen.setColor(e)}},e.prototype.getRGBInput=function(){var e=document.createElement("input");return e.type="number",e.min="0",e.max="255",e.value="217",e},e}();t.ColorPick=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.isDown=!1,this.color="202020",this.viewer=e,this.setListeners()}return e.prototype.setListeners=function(){var e=this;this.viewer.div.addEventListener("mousedown",(function(t){return e.isDown=!0})),this.viewer.div.addEventListener("mouseup",(function(t){return e.isDown=!1})),this.viewer.div.addEventListener("mouseleave",(function(t){return e.isDown=!1}));for(var t=0,n=this.viewer.cells;t<n.length;t++)for(var r=function(t){t.div.addEventListener("mouseenter",(function(n){return e.onTouchAction(n,t)})),t.div.addEventListener("mousedown",(function(n){return e.onTouchAction(n,t)}))},i=0,o=n[t];i<o.length;i++){r(o[i])}},e.prototype.onTouchAction=function(e,t){(this.isDown||"mousedown"==e.type)&&t.setColor(this.color)},e.prototype.setColor=function(e){this.color=e},e}();t.Pen=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=function(){function e(){}return e.cipherToBigInt=function(e){return r.Convert.baseToBigInt(this.streamIn(this.cbcIn(e)),r.Convert.hexiDecimal)},e.cipherFromBigInt=function(e,t){return this.cbcOut(this.streamOut(r.Convert.fixLength(r.Convert.bigIntToBase(e,r.Convert.hexiDecimal),t)))},e.streamIn=function(e){for(var t=r.Convert.hexiDecimal,n=t.length,i=t.indexOf(e.charAt(e.length-2))*n+t.indexOf(e.charAt(e.length-1)),o=this.seedrandom(i),a="",c=0;c<e.length-2;c++)a+=t[(t.indexOf(e.charAt(c))+Math.floor(o.quick()*n))%n];return a+e.substring(e.length-2)},e.streamOut=function(e){for(var t=r.Convert.hexiDecimal,n=t.length,i=t.indexOf(e.charAt(e.length-2))*n+t.indexOf(e.charAt(e.length-1)),o=this.seedrandom(i),a="",c=0;c<e.length-2;c++)a+=t[((t.indexOf(e.charAt(c))-Math.floor(o.quick()*n))%n+n)%n];return a+e.substring(e.length-2)},e.cbcIn=function(t){for(var n=0,r=e.startKey,i="";n<t.length;)i+=r=this.encipher(t.substr(n,1),r),n++;return i},e.cbcOut=function(t){for(var n=e.startKey,r=0,i="";r<t.length;){var o=t.substr(r,1);i+=this.decipher(o,n),n=o,r++}return i},e.encipher=function(t,n){return t.length!=n.length?(console.log("encipher block wrong size"),""):e.hexDecMap[(r.Convert.hexiDecimal.indexOf(t)+r.Convert.hexiDecimal.indexOf(n))%e.hexDecMap.length]},e.decipher=function(t,n){if(t.length!=n.length)return console.log("decipher block wrong size"),"";var i=r.Convert.hexiDecimal.length;return r.Convert.hexiDecimal[((e.hexDecMap.indexOf(t)-r.Convert.hexiDecimal.indexOf(n))%i+i)%i]},e.startKey="7",e.hexDecMap=["2","6","a","3","b","0","c","4","1","f","d","5","e","7","8","9"],e.seedrandom=n(16),e}();t.Cipher=i},function(e,t,n){var r=n(17),i=n(18),o=n(19),a=n(20),c=n(21),u=n(22),l=n(23);l.alea=r,l.xor128=i,l.xorwow=o,l.xorshift7=a,l.xor4096=c,l.tychei=u,e.exports=l},function(e,t,n){(function(e){var r;!function(e,i,o){function a(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function c(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new a(e),r=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&c(r,n),i.state=function(){return c(n,{})}),i}i&&i.exports?i.exports=u:n(0)&&n(2)?void 0===(r=function(){return u}.call(t,n,t,i))||(i.exports=r):this.alea=u}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function c(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new a(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&c(r,n),i.state=function(){return c(n,{})}),i}i&&i.exports?i.exports=u:n(0)&&n(2)?void 0===(r=function(){return u}.call(t,n,t,i))||(i.exports=r):this.xor128=u}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function c(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new a(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&c(r,n),i.state=function(){return c(n,{})}),i}i&&i.exports?i.exports=u:n(0)&&n(2)?void 0===(r=function(){return u}.call(t,n,t,i))||(i.exports=r):this.xorwow=u}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function a(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function c(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.x&&c(r,n),i.state=function(){return c(n,{})}),i}i&&i.exports?i.exports=u:n(0)&&n(2)?void 0===(r=function(){return u}.call(t,n,t,i))||(i.exports=r):this.xorshift7=u}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function a(e){var t=this;t.next=function(){var e,n,r=t.w,i=t.X,o=t.i;return t.w=r=r+1640531527|0,n=i[o+34&127],e=i[o=o+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=i[o]=n^e,t.i=o,n+(r^r>>>16)|0},function(e,t){var n,r,i,o,a,c=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),i=0,o=-32;o<u;++o)t&&(r^=t.charCodeAt((o+32)%t.length)),0===o&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(a=a+1640531527|0,i=0==(n=c[127&o]^=r+a)?i+1:0);for(i>=128&&(c[127&(t&&t.length||0)]=-1),i=127,o=512;o>0;--o)r=c[i+34&127],n=c[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,c[i]=r^n;e.w=a,e.X=c,e.i=i}(t,e)}function c(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.X&&c(r,n),i.state=function(){return c(n,{})}),i}i&&i.exports?i.exports=u:n(0)&&n(2)?void 0===(r=function(){return u}.call(t,n,t,i))||(i.exports=r):this.xor4096=u}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,i=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^i,t.a=i-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function c(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new a(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&c(r,n),i.state=function(){return c(n,{})}),i}i&&i.exports?i.exports=u:n(0)&&n(2)?void 0===(r=function(){return u}.call(t,n,t,i))||(i.exports=r):this.tychei=u}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){var r;!function(i,o,a){var c,u=a.pow(256,6),l=a.pow(2,52),s=2*l;function d(e,t,n){var r=[],d=p(function e(t,n){var r,i=[],o=typeof t;if(n&&"object"==o)for(r in t)try{i.push(e(t[r],n-1))}catch(e){}return i.length?i:"string"==o?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,v(o)]:null==e?function(){try{var e;return c&&(e=c.randomBytes)?e=e(256):(e=new Uint8Array(256),(i.crypto||i.msCrypto).getRandomValues(e)),v(e)}catch(e){var t=i.navigator,n=t&&t.plugins;return[+new Date,i,n,i.screen,v(o)]}}():e,3),r),g=new h(r),m=function(){for(var e=g.g(6),t=u,n=0;e<l;)e=256*(e+n),t*=256,n=g.g(1);for(;e>=s;)e/=2,t/=2,n>>>=1;return(e+n)/t};return m.int32=function(){return 0|g.g(4)},m.quick=function(){return g.g(4)/4294967296},m.double=m,p(v(g.S),o),(t.pass||n||function(e,t,n,r){return r&&(r.S&&f(r,g),e.state=function(){return f(g,{})}),n?(a.random=e,t):e})(m,d,"global"in t?t.global:this==a,t.state)}function h(e){var t,n=e.length,r=this,i=0,o=r.i=r.j=0,a=r.S=[];for(n||(e=[n++]);i<256;)a[i]=i++;for(i=0;i<256;i++)a[i]=a[o=255&o+e[i%n]+(t=a[i])],a[o]=t;(r.g=function(e){for(var t,n=0,i=r.i,o=r.j,a=r.S;e--;)t=a[i=255&i+1],n=256*n+a[255&(a[i]=a[o=255&o+t])+(a[o]=t)];return r.i=i,r.j=o,n})(256)}function f(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){for(var n,r=e+"",i=0;i<r.length;)t[255&i]=255&(n^=19*t[255&i])+r.charCodeAt(i++);return v(t)}function v(e){return String.fromCharCode.apply(0,e)}if(p(a.random(),o),e.exports){e.exports=d;try{c=n(24)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,